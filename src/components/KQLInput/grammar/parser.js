import { LRParser } from '@lezer/lr';
import { NodeProp } from '@lezer/common';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 13,
  states:
    "#`OVQPOOQ_QQOOOVQPO'#CcOgQPO'#CdOOQO'#C_'#C_OVQPO,58zOVQPO,58zOxQQO,58}OOQO'#Cf'#CfO!TQPO,59OOOQO1G.f1G.fO!cQQO1G.fOOQO1G.i1G.iOVQPO'#CpOOQO'#Cl'#ClOOQO1G.j1G.jO!tQQO,59[OOQO1G.v1G.v",
  stateData: '#P~OPOS~OXROgQO~OTTOUUO~OZWO[WO]WO^WO_WO~OTTOUUOh[O~Oa^Ob^Oc^Oi]O~OTTOUSieSihSijSi~OTTOUUOjaO~O',
  goto: '!VePPPfuPPuuP|PPPPP!PPPP!SQPOQVQQYTQZUR`]ZSOQTU]RXRR_XR^X',
  nodeNames:
    'âš  LineComment KQL Expr BinaryExpr And Or ParenExpr VectorSelector FieldName MatchOperator Colon Gtr Gte Lss Lte FieldValue Asterisk StringLiteral NumberLiteral NestedQuery',
  maxTerm: 26,
  nodeProps: [[NodeProp.group, 3, 'Statement']],
  skippedNodes: [0, 1],
  repeatNodeCount: 0,
  tokenData:
    "*t~Rers!dst#Wxy#cyz#hz{#m!Q![#r![!]%T!^!_%Y!`!a%g!b!c%t!c!d&Y!d!q%t!q!r'v!r!}%t#R#S%t#T#U(x#U#c%t#c#d*O#d#o%t#o#p*j#q#r*o~!iUb~OY!dZr!drs!{s#O!d#O#P#Q#P~!d~#QOb~~#TPO~!d~#]QP~OY#WZ~#W~#hOg~~#mOh~~#rOa~~#wSc~!O!P$T!Q![#r!g!h$i#X#Y$i~$WP!Q![$Z~$`Rc~!Q![$Z!g!h$i#X#Y$i~$lR{|$u}!O$u!Q![${~$xP!Q![${~%QPc~!Q![${~%YOZ~~%_P^~!_!`%b~%gO_~~%lP[~!_!`%o~%tO]~P%yTXP!O!P%t!Q![%t!c!}%t#R#S%t#T#o%tR&_VXP!O!P%t!Q![%t!c!p%t!p!q&t!q!}%t#R#S%t#T#o%tR&yVXP!O!P%t!Q![%t!c!f%t!f!g'`!g!}%t#R#S%t#T#o%tR'gTTQXP!O!P%t!Q![%t!c!}%t#R#S%t#T#o%tR'{VXP!O!P%t!Q![%t!c!t%t!t!u(b!u!}%t#R#S%t#T#o%tR(iTXPUQ!O!P%t!Q![%t!c!}%t#R#S%t#T#o%tR(}VXP!O!P%t!Q![%t!c!}%t#R#S%t#T#b%t#b#c)d#c#o%tR)iVXP!O!P%t!Q![%t!c!}%t#R#S%t#T#W%t#W#X'`#X#o%tR*TVXP!O!P%t!Q![%t!c!}%t#R#S%t#T#f%t#f#g(b#g#o%t~*oOi~~*tOj~",
  tokenizers: [0, 1],
  topRules: { KQL: [0, 2] },
  tokenPrec: 0,
});
// This file was generated by lezer-generator. You probably shouldn't edit it.
const LineComment = 1,
  KQL = 2,
  Expr = 3,
  BinaryExpr = 4,
  And = 5,
  Or = 6,
  ParenExpr = 7,
  VectorSelector = 8,
  FieldName = 9,
  MatchOperator = 10,
  Colon = 11,
  Gtr = 12,
  Gte = 13,
  Lss = 14,
  Lte = 15,
  FieldValue = 16,
  Asterisk = 17,
  StringLiteral = 18,
  NumberLiteral = 19,
  NestedQuery = 20;

export {
  And,
  Asterisk,
  BinaryExpr,
  Colon,
  Expr,
  FieldName,
  FieldValue,
  Gte,
  Gtr,
  KQL,
  LineComment,
  Lss,
  Lte,
  MatchOperator,
  NestedQuery,
  NumberLiteral,
  Or,
  ParenExpr,
  StringLiteral,
  VectorSelector,
  parser,
};
